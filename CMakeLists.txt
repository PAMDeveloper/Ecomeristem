CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(Ecomeristem CXX C)
ENABLE_TESTING()

SET(ECOMERISTEM_MAJOR 1)
SET(ECOMERISTEM_MINOR 0)
SET(ECOMERISTEM_PATCH 0)
SET(ECOMERISTEM_EXTRA "")
SET(ECOMERISTEM_VERSION "${ECOMERISTEM_MAJOR}.${ECOMERISTEM_MINOR}.${ECOMERISTEM_PATCH}")
SET(ECOMERISTEM_VERSION_SHORT "${ECOMERISTEM_MAJOR}.${ECOMERISTEM_MINOR}")
SET(ECOMERISTEM_NAME "ecomeristem")
SET(ECOMERISTEM_NAME_VERSION "${ECOMERISTEM_NAME}-${ECOMERISTEM_VERSION}")
SET(ECOMERISTEM_LOCALE_NAME "${ECOMERISTEM_NAME}-${ECOMERISTEM_MAJOR}-${ECOMERISTEM_MINOR}")
IF ("${ECOMERISTEM_EXTRA}" STREQUAL "")
  SET(ECOMERISTEM_COMPLETE "${ECOMERISTEM_MAJOR}.${ECOMERISTEM_MINOR}.${ECOMERISTEM_PATCH}")
ELSE ("${ECOMERISTEM_EXTRA}" STREQUAL "")
  SET(ECOMERISTEM_COMPLETE "${ECOMERISTEM_MAJOR}.${ECOMERISTEM_MINOR}.${ECOMERISTEM_PATCH}-${ECOMERISTEM_EXTRA}")
ENDIF ("${ECOMERISTEM_EXTRA}" STREQUAL "")
SET(ECOMERISTEM_NAME_COMPLETE "${ECOMERISTEM_NAME}-${ECOMERISTEM_COMPLETE}")

#
 # Installation variables
#

SET(ECOMERISTEM_LIBRARY_DIRS "lib/ecomeristem-${ECOMERISTEM_VERSION_SHORT}")
SET(ECOMERISTEM_INCLUDE_DIRS "include/ecomeristem-${ECOMERISTEM_VERSION_SHORT}/ecomeristem")
SET(ECOMERISTEM_INCLUDE_DIR "include/ecomeristem-${ECOMERISTEM_VERSION_SHORT}")
SET(ECOMERISTEM_MANPAGE_PATH "share/man/man1")
SET(ECOMERISTEM_SHARE_DIRS "share/ecomeristem-${ECOMERISTEM_VERSION_SHORT}")

#
 # Append the library version information to the library target
 # properties.
#

SET(ECOMERISTEM_LIBRARY_PROPERTIES VERSION 0)
SET(ECOMERISTEM_APP_PROPERTIES SOVERSION "${ECOMERISTEM_MAJOR}.${ECOMERISTEM_MINOR}"
  VERSION "${ECOMERISTEM_MAJOR}.${ECOMERISTEM_MINOR}")

#
 # CPack configuration
#

INCLUDE(CMakeCPack.cmake)

#
 # Debug mode
#

IF (CMAKE_COMPILER_IS_GNUCC AND CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -pthread -fPIC")
  IF (UNIX)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic")
  ENDIF (UNIX)
ENDIF (CMAKE_COMPILER_IS_GNUCC AND CMAKE_COMPILER_IS_GNUCXX)

if (CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build" FORCE)
endif ()

#
 # Modules
#

INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckLibraryExists)
INCLUDE(CMakeDetermineCCompiler)

#
 # Check libraries with pkgconfig
#

FIND_PACKAGE(PkgConfig REQUIRED)
PKG_CHECK_MODULES(ARTIS artis-1.0)


# FIXME use old-style link directories for now
IF (COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0003 OLD)
ENDIF (COMMAND CMAKE_POLICY)

#
 # Test the libboost header and libboost-text library.
#

SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_LIBS OFF)
SET(Boost_NO_SYSTEM_PATHS OFF)
SET(Boost_USE_STATIC_RUNTIME ON)
SET(Boost_DETAILED_FAILURE_MSG FALSE)
SET(Boost_DEBUG FALSE)

FIND_PACKAGE(Boost COMPONENTS
        date_time filesystem program_options system REQUIRED)
IF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "35")
  SET(Boost_SYSTEM_LIBRARY "")
ENDIF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "35")
IF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
  SET(ECOMERISTEM_HAVE_BOOST_SPIRIT2 0 CACHE INTERNAL "" FORCE)
ELSE (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
  SET(ECOMERISTEM_HAVE_BOOST_SPIRIT2 1 CACHE INTERNAL "" FORCE)
ENDIF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")

#
 # Generate the config.h
#

CHECK_INCLUDE_FILE_CXX(cxxabi.h ECOMERISTEM_HAVE_GCC_ABI_DEMANGLE)
CHECK_INCLUDE_FILE_CXX(execinfo.h ECOMERISTEM_HAVE_EXECINFO)
CHECK_INCLUDE_FILE_CXX(signal.h ECOMERISTEM_HAVE_SIGNAL)
INCLUDE_DIRECTORIES(${ECOMERISTEM_BINARY_DIR})

#
 # Generate the vle.pc pkg-config file.
 # Build some variable to build a correct Win32 pkg config file with:
 # prefix=/target to detect the DIRNAME
 # cflag=-Iboost_1_34_1 for the directory
#

SET(ECOMERISTEM_PKGCONFIG_PREFIXPATH "${CMAKE_INSTALL_PREFIX}")
SET(ECOMERISTEM_PKGCONFIG_BOOSTINCLUDE_DIRS "${Boost_INCLUDE_DIRS}")
SET(ECOMERISTEM_PKGCONFIG_LIBDIR "lib")

#
 # Install the README
#

INSTALL(FILES "README" DESTINATION "${ECOMERISTEM_SHARE_DIRS}")
INSTALL(FILES "COPYING" DESTINATION "${ECOMERISTEM_SHARE_DIRS}")

#
 # Databases
#

PKG_CHECK_MODULES(PQXX libpqxx)

#
 # Browse the src subdirectory
#

ADD_SUBDIRECTORY(src)

#
 # Status
#

MESSAGE(STATUS "- - - -")
MESSAGE(STATUS "${ECOMERISTEM_NAME_COMPLETE} configured successfully")
MESSAGE(STATUS "Using ${CMAKE_INSTALL_PREFIX} for installation")
MESSAGE(STATUS "Build type ${CMAKE_BUILD_TYPE}")
IF (ECOMERISTEM_HAVE_GCC_ABI_DEMANGLE)
  MESSAGE(STATUS "Build with GCC ABI Demangle...: yes")
ENDIF (ECOMERISTEM_HAVE_GCC_ABI_DEMANGLE)
IF (ECOMERISTEM_HAVE_EXECINFO)
  MESSAGE(STATUS "Build with execinfo.h.........: yes")
ENDIF (ECOMERISTEM_HAVE_EXECINFO)
IF (Boost_FOUND)
  MESSAGE(STATUS "Build with boost..............: yes")
ENDIF (Boost_FOUND)
MESSAGE(STATUS "- - - -")
